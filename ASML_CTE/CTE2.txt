import sys
sys.path.append("/Users/BizzaroHD/opt/anaconda3/lib/python3.8/site-packages/PySimpleGUI/__init__.py")

import PySimpleGUI as sg

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

from shapely.geometry import LineString
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure

        
"""
def make_dpi_aware():
  import ctypes
  import platform
  if int(platform.release()) >= 8:
    ctypes.windll.shcore.SetProcessDpiAwareness(True)
    make_dpi_aware()
"""
#Function for drawing
def draw_figure(canvas, figure):
                 
    figure_canvas_agg = FigureCanvasTkAgg(figure, canvas)
    figure_canvas_agg.draw()
    figure_canvas_agg.get_tk_widget().pack(side='top', fill='both', expand=1)
    return figure_canvas_agg



Descrip = """Enter Mean CTE (0-50C) for Zerodur and dl/l@280 for ULE.  """


#sg.Print('Re-routing the stdout', do_not_reroute_stdout=False)
#print = sg.Print
font1 = ("Arial", 20)
font2 = ("Arial", 10)
layout = [
        [sg.Text("Enter ULE Melt Data: "), sg.InputText(size=(50, 250), enable_events=True, key = "ULEmelt"),sg.Text("Temperature Match [C]:",font=font1,text_color="white"),sg.Text(size=(20,1), justification='center',text_color='red', background_color='white', key='tempnum',font=("Arial",25))],
        [sg.Text("Enter Zerodur Melt Data: "), sg.InputText(size=(50, 250), enable_events=True, key = "Zmelt")],
        [ sg.Submit() ,sg.Button("Clear"),sg.Button("Exit")],
           
           [sg.Canvas(key="-CANVAS-"),sg.Text(Descrip, size=(25,25), justification='left',text_color='black', background_color='white')],#sg.Listbox(values="Log", size=(40, 1), key='_LISTBOX_')],
            
           ]
        



    
#window = sg.Window('My File Browser', layout, size=(200,300))

w,h = sg.Window.get_screen_size()
window = sg.Window('Zerodur and ULE CTE Matching GUI', layout, finalize=True, size=(int(w-w*(1/5)),int(h-h*(1/8))),element_justification='left',font='Monospace 12')

plt.rcParams['figure.figsize'] = [15, 12]
fig = Figure()
ax2 = fig.add_subplot(facecolor = "#A0F0CC")
fig_agg = draw_figure(window['-CANVAS-'].TKCanvas, fig)

while True:
    event, values = window.read()
    if event == sg.WIN_CLOSED or event=="Exit":
        
        break
   
    if event == "Clear":
        
        fig = Figure()
        fig_agg.get_tk_widget().pack_forget()
        ax2 = fig.add_subplot(facecolor = "#A0F0CC")
        fig_agg = draw_figure(window['-CANVAS-'].TKCanvas, fig)
        
        window.FindElement('tempnum').Update("")
        
    if event == "Submit":
        try:
            
            ZMelt = float(values['Zmelt'])
    
            ULEMelt = float(values['ULEmelt'])
            
            TempRange = list(range(0,300,1))
            
            
            NominalULE = []
            
            
            NominalZ = []
            
            #Zerodur
            a = 123
            b = 193
            c = -293
            d = 285
            e = -75
            f = -81
            
            A =  (2.80661244*10**-2)
            B =  (3.73040882*10**-4)
            C = (-6.74491115*10**-6)
            D = (-8.50368511*10**-9)
            E = ( 2.64301345*10**-10)
            F = (-5.44260732*10**-13)
            for i in TempRange:
                    TE_NZ = A*(i+(ZMelt*a))+   B*(i+(ZMelt*b))**2+    C*(i+(ZMelt*c))**3+    D*(i+(ZMelt*d))**4 +     E*(i+(ZMelt*e))**5 ++     F*(i+(ZMelt*f))**6
                    NominalZ.append(TE_NZ)
            
            #ULE
            a2 = 1
            b2 = 2
            c2 = -1
            d2= -2
            e2 = -10
            f2 = -8
            
            A2 =(-5.73320403*10**-2)
            B2 =(6.49668750*10**-4)
            C2 =(-1.98789854*10**-6)
            D2 =(1.67003824*10**-9)
            E2 =(-3.69191483*10**-12) 
            F2 =( 4.99876988*10**-15)
           

            for i in TempRange:
                    TE_ULE = A2*(i+(ULEMelt*a2))+   B2*(i+(ULEMelt*b2))**2+    C2*(i+(ULEMelt*c2))**3+    D2*(i+(ULEMelt*d2))**4 +     E2*(i+(ULEMelt*e2))**5 + F2*(i+(ULEMelt*f2))**6
                    NominalULE.append(TE_ULE)
            
            
            
            #print(NominalULE)
            #print(LowULE)
            #print(HighULE)
            
            TempRange = np.array(TempRange)
            
            NominalULE = np.array(NominalULE)
      
            
            NominalZ = np.array(NominalZ)
               
               
            
            
            
        
     
           
        
        
           #Nominal intersection points
        
            def Trim(dataset):
                datasetnew = dataset[150:300]
                return datasetnew
                
            
            
            ULE_Nominal_Line= LineString(np.column_stack((Trim(TempRange), Trim(NominalULE))))
            Z_Nominal_Line= LineString(np.column_stack((Trim(TempRange), Trim(NominalZ))))
            N_intersection = ULE_Nominal_Line.intersection(Z_Nominal_Line)
            
            #Low intersection points
       
            print(N_intersection)
            
            #high intersection points
            
            
            
    
    
    
    
    
            
            #Trendline of Nominal Data sets
    
           
    
            
            
            
            
            #Nominal intersection points
            def intersectionpoints(intersection):
                points = []
                
                points.append([intersection.x, intersection.y])
            
                array_points = np.array(points)
               
                return array_points
            
       
            def plotintersectionpoints(array_points):
                ax2.scatter(array_points[:,0],array_points[:,1],linewidth = 5)
                for x,y in zip(array_points[:,0],array_points[:,1]):
            
                    label = "{:.2f}".format(x),"{:.2f}".format(y)
            
                    ax2.annotate(label, # this is the text
                             (x,y), # this is the point to label
                             textcoords="offset points", # how to position the text
                             xytext=(10,10), # distance from text to points (x,y)
                             ha='right',
                             fontsize = 20) # horizontal alignment can be left, right or centerr
            
            intersectionpoints(N_intersection)
         
            
            #Nominal ULE
            ax2.plot(TempRange,NominalULE, color = 'r',label = 'NominalULE', linewidth = 2)
           
            ax2.plot(TempRange,NominalZ, color = 'k',label = 'NominalZ', linewidth = 2)
                      
            
            plt.show()
            
            
            
            plotintersectionpoints(intersectionpoints(N_intersection))
           
            
            ax2.set_xlim(0)
            ax2.set_ylim(-5)
            #ax2.legend(loc = "upper left")
            ax2.grid()
            ax2.set_xlabel("Temp [C]", fontsize = 20)
            ax2.set_ylabel("Thermal Expansion [ppb/C]", fontsize = 20)
           
    
            
                   
            fig_agg.draw()
            
            
        
            NTemperatureMatch = round(intersectionpoints(N_intersection)[0][0],3)
           
            
            window.FindElement('tempnum').Update(NTemperatureMatch)
        
        
        
        
        
        
        except Exception:
            print("Please Try Again")
            
            layouterror = [[sg.Text("Error.\nPlease Try Again.",font=font1)],[sg.Button("OK",font=font1)]]
            windowerror = sg.Window("Error", layouterror, size = (400,400))
            
            while True:
                event, values = windowerror.read()
                if event == "Exit" or event == sg.WIN_CLOSED:
                    break
                if event == "OK":
                    windowerror.close()
            #Clear window for new data incoming
        
            
        
    
    
window.close()
